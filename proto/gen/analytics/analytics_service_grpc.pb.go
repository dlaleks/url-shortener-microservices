// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: analytics/analytics_service.proto

package analytics

import (
	context "context"
	common "github.com/url-shortener-microservices/proto/gen/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AnalyticsService_RecordClick_FullMethodName          = "/analytics.AnalyticsService/RecordClick"
	AnalyticsService_GetURLAnalytics_FullMethodName      = "/analytics.AnalyticsService/GetURLAnalytics"
	AnalyticsService_GetUserAnalytics_FullMethodName     = "/analytics.AnalyticsService/GetUserAnalytics"
	AnalyticsService_GetRealTimeAnalytics_FullMethodName = "/analytics.AnalyticsService/GetRealTimeAnalytics"
	AnalyticsService_ExportAnalytics_FullMethodName      = "/analytics.AnalyticsService/ExportAnalytics"
	AnalyticsService_StreamAnalytics_FullMethodName      = "/analytics.AnalyticsService/StreamAnalytics"
	AnalyticsService_HealthCheck_FullMethodName          = "/analytics.AnalyticsService/HealthCheck"
)

// AnalyticsServiceClient is the client API for AnalyticsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// gRPC service definition
type AnalyticsServiceClient interface {
	// Core analytics operations
	RecordClick(ctx context.Context, in *RecordClickRequest, opts ...grpc.CallOption) (*RecordClickResponse, error)
	GetURLAnalytics(ctx context.Context, in *GetURLAnalyticsRequest, opts ...grpc.CallOption) (*GetURLAnalyticsResponse, error)
	GetUserAnalytics(ctx context.Context, in *GetUserAnalyticsRequest, opts ...grpc.CallOption) (*GetUserAnalyticsResponse, error)
	GetRealTimeAnalytics(ctx context.Context, in *GetRealTimeAnalyticsRequest, opts ...grpc.CallOption) (*GetRealTimeAnalyticsResponse, error)
	// Data export
	ExportAnalytics(ctx context.Context, in *ExportAnalyticsRequest, opts ...grpc.CallOption) (*ExportAnalyticsResponse, error)
	// Real-time streaming (Server-side streaming)
	StreamAnalytics(ctx context.Context, in *StreamAnalyticsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamAnalyticsResponse], error)
	// Health check
	HealthCheck(ctx context.Context, in *common.HealthCheckRequest, opts ...grpc.CallOption) (*common.HealthCheckResponse, error)
}

type analyticsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnalyticsServiceClient(cc grpc.ClientConnInterface) AnalyticsServiceClient {
	return &analyticsServiceClient{cc}
}

func (c *analyticsServiceClient) RecordClick(ctx context.Context, in *RecordClickRequest, opts ...grpc.CallOption) (*RecordClickResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecordClickResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_RecordClick_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetURLAnalytics(ctx context.Context, in *GetURLAnalyticsRequest, opts ...grpc.CallOption) (*GetURLAnalyticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetURLAnalyticsResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetURLAnalytics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetUserAnalytics(ctx context.Context, in *GetUserAnalyticsRequest, opts ...grpc.CallOption) (*GetUserAnalyticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserAnalyticsResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetUserAnalytics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetRealTimeAnalytics(ctx context.Context, in *GetRealTimeAnalyticsRequest, opts ...grpc.CallOption) (*GetRealTimeAnalyticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRealTimeAnalyticsResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetRealTimeAnalytics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) ExportAnalytics(ctx context.Context, in *ExportAnalyticsRequest, opts ...grpc.CallOption) (*ExportAnalyticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportAnalyticsResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_ExportAnalytics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) StreamAnalytics(ctx context.Context, in *StreamAnalyticsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamAnalyticsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AnalyticsService_ServiceDesc.Streams[0], AnalyticsService_StreamAnalytics_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamAnalyticsRequest, StreamAnalyticsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AnalyticsService_StreamAnalyticsClient = grpc.ServerStreamingClient[StreamAnalyticsResponse]

func (c *analyticsServiceClient) HealthCheck(ctx context.Context, in *common.HealthCheckRequest, opts ...grpc.CallOption) (*common.HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.HealthCheckResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnalyticsServiceServer is the server API for AnalyticsService service.
// All implementations must embed UnimplementedAnalyticsServiceServer
// for forward compatibility.
//
// gRPC service definition
type AnalyticsServiceServer interface {
	// Core analytics operations
	RecordClick(context.Context, *RecordClickRequest) (*RecordClickResponse, error)
	GetURLAnalytics(context.Context, *GetURLAnalyticsRequest) (*GetURLAnalyticsResponse, error)
	GetUserAnalytics(context.Context, *GetUserAnalyticsRequest) (*GetUserAnalyticsResponse, error)
	GetRealTimeAnalytics(context.Context, *GetRealTimeAnalyticsRequest) (*GetRealTimeAnalyticsResponse, error)
	// Data export
	ExportAnalytics(context.Context, *ExportAnalyticsRequest) (*ExportAnalyticsResponse, error)
	// Real-time streaming (Server-side streaming)
	StreamAnalytics(*StreamAnalyticsRequest, grpc.ServerStreamingServer[StreamAnalyticsResponse]) error
	// Health check
	HealthCheck(context.Context, *common.HealthCheckRequest) (*common.HealthCheckResponse, error)
	mustEmbedUnimplementedAnalyticsServiceServer()
}

// UnimplementedAnalyticsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAnalyticsServiceServer struct{}

func (UnimplementedAnalyticsServiceServer) RecordClick(context.Context, *RecordClickRequest) (*RecordClickResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordClick not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetURLAnalytics(context.Context, *GetURLAnalyticsRequest) (*GetURLAnalyticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetURLAnalytics not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetUserAnalytics(context.Context, *GetUserAnalyticsRequest) (*GetUserAnalyticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAnalytics not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetRealTimeAnalytics(context.Context, *GetRealTimeAnalyticsRequest) (*GetRealTimeAnalyticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRealTimeAnalytics not implemented")
}
func (UnimplementedAnalyticsServiceServer) ExportAnalytics(context.Context, *ExportAnalyticsRequest) (*ExportAnalyticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportAnalytics not implemented")
}
func (UnimplementedAnalyticsServiceServer) StreamAnalytics(*StreamAnalyticsRequest, grpc.ServerStreamingServer[StreamAnalyticsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamAnalytics not implemented")
}
func (UnimplementedAnalyticsServiceServer) HealthCheck(context.Context, *common.HealthCheckRequest) (*common.HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedAnalyticsServiceServer) mustEmbedUnimplementedAnalyticsServiceServer() {}
func (UnimplementedAnalyticsServiceServer) testEmbeddedByValue()                          {}

// UnsafeAnalyticsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnalyticsServiceServer will
// result in compilation errors.
type UnsafeAnalyticsServiceServer interface {
	mustEmbedUnimplementedAnalyticsServiceServer()
}

func RegisterAnalyticsServiceServer(s grpc.ServiceRegistrar, srv AnalyticsServiceServer) {
	// If the following call pancis, it indicates UnimplementedAnalyticsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AnalyticsService_ServiceDesc, srv)
}

func _AnalyticsService_RecordClick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordClickRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).RecordClick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_RecordClick_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).RecordClick(ctx, req.(*RecordClickRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetURLAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetURLAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetURLAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetURLAnalytics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetURLAnalytics(ctx, req.(*GetURLAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetUserAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetUserAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetUserAnalytics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetUserAnalytics(ctx, req.(*GetUserAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetRealTimeAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRealTimeAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetRealTimeAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetRealTimeAnalytics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetRealTimeAnalytics(ctx, req.(*GetRealTimeAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_ExportAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).ExportAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_ExportAnalytics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).ExportAnalytics(ctx, req.(*ExportAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_StreamAnalytics_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamAnalyticsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AnalyticsServiceServer).StreamAnalytics(m, &grpc.GenericServerStream[StreamAnalyticsRequest, StreamAnalyticsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AnalyticsService_StreamAnalyticsServer = grpc.ServerStreamingServer[StreamAnalyticsResponse]

func _AnalyticsService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).HealthCheck(ctx, req.(*common.HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AnalyticsService_ServiceDesc is the grpc.ServiceDesc for AnalyticsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnalyticsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "analytics.AnalyticsService",
	HandlerType: (*AnalyticsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecordClick",
			Handler:    _AnalyticsService_RecordClick_Handler,
		},
		{
			MethodName: "GetURLAnalytics",
			Handler:    _AnalyticsService_GetURLAnalytics_Handler,
		},
		{
			MethodName: "GetUserAnalytics",
			Handler:    _AnalyticsService_GetUserAnalytics_Handler,
		},
		{
			MethodName: "GetRealTimeAnalytics",
			Handler:    _AnalyticsService_GetRealTimeAnalytics_Handler,
		},
		{
			MethodName: "ExportAnalytics",
			Handler:    _AnalyticsService_ExportAnalytics_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _AnalyticsService_HealthCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamAnalytics",
			Handler:       _AnalyticsService_StreamAnalytics_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "analytics/analytics_service.proto",
}
