// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: analytics/analytics_service.proto

package analytics

import (
	common "github.com/url-shortener-microservices/proto/gen/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Click event data
type ClickEvent struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Id        string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                // Unique event ID
	UrlId     string                 `protobuf:"bytes,2,opt,name=url_id,json=urlId,proto3" json:"url_id,omitempty"`             // Short URL ID that was clicked
	SessionId string                 `protobuf:"bytes,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"` // User session identifier
	UserId    string                 `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          // User ID (if authenticated, empty if anonymous)
	// Request details
	IpAddress string `protobuf:"bytes,5,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"` // Client IP (anonymized for privacy)
	UserAgent string `protobuf:"bytes,6,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"` // Browser/client information
	Referrer  string `protobuf:"bytes,7,opt,name=referrer,proto3" json:"referrer,omitempty"`                    // Where the click came from
	Country   string `protobuf:"bytes,8,opt,name=country,proto3" json:"country,omitempty"`                      // Geo-location country
	City      string `protobuf:"bytes,9,opt,name=city,proto3" json:"city,omitempty"`                            // Geo-location city
	// Device/Browser info
	DeviceType string `protobuf:"bytes,10,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"` // "desktop", "mobile", "tablet"
	Browser    string `protobuf:"bytes,11,opt,name=browser,proto3" json:"browser,omitempty"`                         // "chrome", "firefox", "safari", etc.
	Os         string `protobuf:"bytes,12,opt,name=os,proto3" json:"os,omitempty"`                                   // "windows", "macos", "android", etc.
	// Timing
	ClickedAt      *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=clicked_at,json=clickedAt,proto3" json:"clicked_at,omitempty"`
	ResponseTimeMs int32                  `protobuf:"varint,14,opt,name=response_time_ms,json=responseTimeMs,proto3" json:"response_time_ms,omitempty"` // Time to serve redirect
	// Campaign tracking (UTM parameters)
	UtmSource     string `protobuf:"bytes,15,opt,name=utm_source,json=utmSource,proto3" json:"utm_source,omitempty"`
	UtmMedium     string `protobuf:"bytes,16,opt,name=utm_medium,json=utmMedium,proto3" json:"utm_medium,omitempty"`
	UtmCampaign   string `protobuf:"bytes,17,opt,name=utm_campaign,json=utmCampaign,proto3" json:"utm_campaign,omitempty"`
	UtmTerm       string `protobuf:"bytes,18,opt,name=utm_term,json=utmTerm,proto3" json:"utm_term,omitempty"`
	UtmContent    string `protobuf:"bytes,19,opt,name=utm_content,json=utmContent,proto3" json:"utm_content,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClickEvent) Reset() {
	*x = ClickEvent{}
	mi := &file_analytics_analytics_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClickEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickEvent) ProtoMessage() {}

func (x *ClickEvent) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickEvent.ProtoReflect.Descriptor instead.
func (*ClickEvent) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{0}
}

func (x *ClickEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ClickEvent) GetUrlId() string {
	if x != nil {
		return x.UrlId
	}
	return ""
}

func (x *ClickEvent) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ClickEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ClickEvent) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *ClickEvent) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *ClickEvent) GetReferrer() string {
	if x != nil {
		return x.Referrer
	}
	return ""
}

func (x *ClickEvent) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *ClickEvent) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *ClickEvent) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *ClickEvent) GetBrowser() string {
	if x != nil {
		return x.Browser
	}
	return ""
}

func (x *ClickEvent) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *ClickEvent) GetClickedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ClickedAt
	}
	return nil
}

func (x *ClickEvent) GetResponseTimeMs() int32 {
	if x != nil {
		return x.ResponseTimeMs
	}
	return 0
}

func (x *ClickEvent) GetUtmSource() string {
	if x != nil {
		return x.UtmSource
	}
	return ""
}

func (x *ClickEvent) GetUtmMedium() string {
	if x != nil {
		return x.UtmMedium
	}
	return ""
}

func (x *ClickEvent) GetUtmCampaign() string {
	if x != nil {
		return x.UtmCampaign
	}
	return ""
}

func (x *ClickEvent) GetUtmTerm() string {
	if x != nil {
		return x.UtmTerm
	}
	return ""
}

func (x *ClickEvent) GetUtmContent() string {
	if x != nil {
		return x.UtmContent
	}
	return ""
}

// Request messages
type RecordClickRequest struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	UrlId     string                 `protobuf:"bytes,1,opt,name=url_id,json=urlId,proto3" json:"url_id,omitempty"`
	SessionId string                 `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	UserId    string                 `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	IpAddress string                 `protobuf:"bytes,4,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	UserAgent string                 `protobuf:"bytes,5,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	Referrer  string                 `protobuf:"bytes,6,opt,name=referrer,proto3" json:"referrer,omitempty"`
	// Optional UTM parameters
	UtmSource     string `protobuf:"bytes,7,opt,name=utm_source,json=utmSource,proto3" json:"utm_source,omitempty"`
	UtmMedium     string `protobuf:"bytes,8,opt,name=utm_medium,json=utmMedium,proto3" json:"utm_medium,omitempty"`
	UtmCampaign   string `protobuf:"bytes,9,opt,name=utm_campaign,json=utmCampaign,proto3" json:"utm_campaign,omitempty"`
	UtmTerm       string `protobuf:"bytes,10,opt,name=utm_term,json=utmTerm,proto3" json:"utm_term,omitempty"`
	UtmContent    string `protobuf:"bytes,11,opt,name=utm_content,json=utmContent,proto3" json:"utm_content,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecordClickRequest) Reset() {
	*x = RecordClickRequest{}
	mi := &file_analytics_analytics_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordClickRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordClickRequest) ProtoMessage() {}

func (x *RecordClickRequest) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordClickRequest.ProtoReflect.Descriptor instead.
func (*RecordClickRequest) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{1}
}

func (x *RecordClickRequest) GetUrlId() string {
	if x != nil {
		return x.UrlId
	}
	return ""
}

func (x *RecordClickRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *RecordClickRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RecordClickRequest) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *RecordClickRequest) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *RecordClickRequest) GetReferrer() string {
	if x != nil {
		return x.Referrer
	}
	return ""
}

func (x *RecordClickRequest) GetUtmSource() string {
	if x != nil {
		return x.UtmSource
	}
	return ""
}

func (x *RecordClickRequest) GetUtmMedium() string {
	if x != nil {
		return x.UtmMedium
	}
	return ""
}

func (x *RecordClickRequest) GetUtmCampaign() string {
	if x != nil {
		return x.UtmCampaign
	}
	return ""
}

func (x *RecordClickRequest) GetUtmTerm() string {
	if x != nil {
		return x.UtmTerm
	}
	return ""
}

func (x *RecordClickRequest) GetUtmContent() string {
	if x != nil {
		return x.UtmContent
	}
	return ""
}

type RecordClickResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *common.Response       `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	EventId       string                 `protobuf:"bytes,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"` // Generated event ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecordClickResponse) Reset() {
	*x = RecordClickResponse{}
	mi := &file_analytics_analytics_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordClickResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordClickResponse) ProtoMessage() {}

func (x *RecordClickResponse) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordClickResponse.ProtoReflect.Descriptor instead.
func (*RecordClickResponse) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{2}
}

func (x *RecordClickResponse) GetStatus() *common.Response {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *RecordClickResponse) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

// Get analytics for a specific URL
type GetURLAnalyticsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UrlId         string                 `protobuf:"bytes,1,opt,name=url_id,json=urlId,proto3" json:"url_id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // Must be owner or admin
	DateRange     *common.DateFilter     `protobuf:"bytes,3,opt,name=date_range,json=dateRange,proto3" json:"date_range,omitempty"`
	Granularity   string                 `protobuf:"bytes,4,opt,name=granularity,proto3" json:"granularity,omitempty"` // "hour", "day", "week", "month"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetURLAnalyticsRequest) Reset() {
	*x = GetURLAnalyticsRequest{}
	mi := &file_analytics_analytics_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetURLAnalyticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetURLAnalyticsRequest) ProtoMessage() {}

func (x *GetURLAnalyticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetURLAnalyticsRequest.ProtoReflect.Descriptor instead.
func (*GetURLAnalyticsRequest) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetURLAnalyticsRequest) GetUrlId() string {
	if x != nil {
		return x.UrlId
	}
	return ""
}

func (x *GetURLAnalyticsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetURLAnalyticsRequest) GetDateRange() *common.DateFilter {
	if x != nil {
		return x.DateRange
	}
	return nil
}

func (x *GetURLAnalyticsRequest) GetGranularity() string {
	if x != nil {
		return x.Granularity
	}
	return ""
}

type URLAnalytics struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	UrlId          string                 `protobuf:"bytes,1,opt,name=url_id,json=urlId,proto3" json:"url_id,omitempty"`
	TotalClicks    int64                  `protobuf:"varint,2,opt,name=total_clicks,json=totalClicks,proto3" json:"total_clicks,omitempty"`
	UniqueVisitors int64                  `protobuf:"varint,3,opt,name=unique_visitors,json=uniqueVisitors,proto3" json:"unique_visitors,omitempty"` // Based on session_id
	// Time series data
	ClickTimeline []*TimeSeriesPoint `protobuf:"bytes,4,rep,name=click_timeline,json=clickTimeline,proto3" json:"click_timeline,omitempty"`
	// Geographic breakdown
	Countries []*GeographicStat `protobuf:"bytes,5,rep,name=countries,proto3" json:"countries,omitempty"`
	Cities    []*GeographicStat `protobuf:"bytes,6,rep,name=cities,proto3" json:"cities,omitempty"`
	// Technology breakdown
	Browsers         []*TechnologyStat `protobuf:"bytes,7,rep,name=browsers,proto3" json:"browsers,omitempty"`
	OperatingSystems []*TechnologyStat `protobuf:"bytes,8,rep,name=operating_systems,json=operatingSystems,proto3" json:"operating_systems,omitempty"`
	Devices          []*TechnologyStat `protobuf:"bytes,9,rep,name=devices,proto3" json:"devices,omitempty"`
	// Traffic sources
	Referrers    []*ReferrerStat `protobuf:"bytes,10,rep,name=referrers,proto3" json:"referrers,omitempty"`
	UtmSources   []*UTMStat      `protobuf:"bytes,11,rep,name=utm_sources,json=utmSources,proto3" json:"utm_sources,omitempty"`
	UtmCampaigns []*UTMStat      `protobuf:"bytes,12,rep,name=utm_campaigns,json=utmCampaigns,proto3" json:"utm_campaigns,omitempty"`
	// Time-based stats
	ClicksByHour  []*HourStat `protobuf:"bytes,13,rep,name=clicks_by_hour,json=clicksByHour,proto3" json:"clicks_by_hour,omitempty"` // 0-23 hours
	ClicksByDay   []*DayStat  `protobuf:"bytes,14,rep,name=clicks_by_day,json=clicksByDay,proto3" json:"clicks_by_day,omitempty"`    // 1-7 days of week
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *URLAnalytics) Reset() {
	*x = URLAnalytics{}
	mi := &file_analytics_analytics_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *URLAnalytics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*URLAnalytics) ProtoMessage() {}

func (x *URLAnalytics) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use URLAnalytics.ProtoReflect.Descriptor instead.
func (*URLAnalytics) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{4}
}

func (x *URLAnalytics) GetUrlId() string {
	if x != nil {
		return x.UrlId
	}
	return ""
}

func (x *URLAnalytics) GetTotalClicks() int64 {
	if x != nil {
		return x.TotalClicks
	}
	return 0
}

func (x *URLAnalytics) GetUniqueVisitors() int64 {
	if x != nil {
		return x.UniqueVisitors
	}
	return 0
}

func (x *URLAnalytics) GetClickTimeline() []*TimeSeriesPoint {
	if x != nil {
		return x.ClickTimeline
	}
	return nil
}

func (x *URLAnalytics) GetCountries() []*GeographicStat {
	if x != nil {
		return x.Countries
	}
	return nil
}

func (x *URLAnalytics) GetCities() []*GeographicStat {
	if x != nil {
		return x.Cities
	}
	return nil
}

func (x *URLAnalytics) GetBrowsers() []*TechnologyStat {
	if x != nil {
		return x.Browsers
	}
	return nil
}

func (x *URLAnalytics) GetOperatingSystems() []*TechnologyStat {
	if x != nil {
		return x.OperatingSystems
	}
	return nil
}

func (x *URLAnalytics) GetDevices() []*TechnologyStat {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *URLAnalytics) GetReferrers() []*ReferrerStat {
	if x != nil {
		return x.Referrers
	}
	return nil
}

func (x *URLAnalytics) GetUtmSources() []*UTMStat {
	if x != nil {
		return x.UtmSources
	}
	return nil
}

func (x *URLAnalytics) GetUtmCampaigns() []*UTMStat {
	if x != nil {
		return x.UtmCampaigns
	}
	return nil
}

func (x *URLAnalytics) GetClicksByHour() []*HourStat {
	if x != nil {
		return x.ClicksByHour
	}
	return nil
}

func (x *URLAnalytics) GetClicksByDay() []*DayStat {
	if x != nil {
		return x.ClicksByDay
	}
	return nil
}

type GetURLAnalyticsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *common.Response       `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Analytics     *URLAnalytics          `protobuf:"bytes,2,opt,name=analytics,proto3" json:"analytics,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetURLAnalyticsResponse) Reset() {
	*x = GetURLAnalyticsResponse{}
	mi := &file_analytics_analytics_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetURLAnalyticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetURLAnalyticsResponse) ProtoMessage() {}

func (x *GetURLAnalyticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetURLAnalyticsResponse.ProtoReflect.Descriptor instead.
func (*GetURLAnalyticsResponse) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetURLAnalyticsResponse) GetStatus() *common.Response {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetURLAnalyticsResponse) GetAnalytics() *URLAnalytics {
	if x != nil {
		return x.Analytics
	}
	return nil
}

// Get analytics for all URLs of a user
type GetUserAnalyticsRequest struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	UserId        string                    `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DateRange     *common.DateFilter        `protobuf:"bytes,2,opt,name=date_range,json=dateRange,proto3" json:"date_range,omitempty"`
	Pagination    *common.PaginationRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	SortBy        string                    `protobuf:"bytes,4,opt,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"` // "clicks", "created_at", "last_click"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserAnalyticsRequest) Reset() {
	*x = GetUserAnalyticsRequest{}
	mi := &file_analytics_analytics_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserAnalyticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserAnalyticsRequest) ProtoMessage() {}

func (x *GetUserAnalyticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserAnalyticsRequest.ProtoReflect.Descriptor instead.
func (*GetUserAnalyticsRequest) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetUserAnalyticsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetUserAnalyticsRequest) GetDateRange() *common.DateFilter {
	if x != nil {
		return x.DateRange
	}
	return nil
}

func (x *GetUserAnalyticsRequest) GetPagination() *common.PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetUserAnalyticsRequest) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

type UserAnalytics struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	UserId              string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TotalUrls           int64                  `protobuf:"varint,2,opt,name=total_urls,json=totalUrls,proto3" json:"total_urls,omitempty"`
	TotalClicks         int64                  `protobuf:"varint,3,opt,name=total_clicks,json=totalClicks,proto3" json:"total_clicks,omitempty"`
	TotalUniqueVisitors int64                  `protobuf:"varint,4,opt,name=total_unique_visitors,json=totalUniqueVisitors,proto3" json:"total_unique_visitors,omitempty"`
	// Top performing URLs
	TopUrls []*URLStat `protobuf:"bytes,5,rep,name=top_urls,json=topUrls,proto3" json:"top_urls,omitempty"`
	// Aggregated stats
	ClickTimeline []*TimeSeriesPoint `protobuf:"bytes,6,rep,name=click_timeline,json=clickTimeline,proto3" json:"click_timeline,omitempty"`
	TopCountries  []*GeographicStat  `protobuf:"bytes,7,rep,name=top_countries,json=topCountries,proto3" json:"top_countries,omitempty"`
	TopReferrers  []*ReferrerStat    `protobuf:"bytes,8,rep,name=top_referrers,json=topReferrers,proto3" json:"top_referrers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserAnalytics) Reset() {
	*x = UserAnalytics{}
	mi := &file_analytics_analytics_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserAnalytics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAnalytics) ProtoMessage() {}

func (x *UserAnalytics) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAnalytics.ProtoReflect.Descriptor instead.
func (*UserAnalytics) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{7}
}

func (x *UserAnalytics) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserAnalytics) GetTotalUrls() int64 {
	if x != nil {
		return x.TotalUrls
	}
	return 0
}

func (x *UserAnalytics) GetTotalClicks() int64 {
	if x != nil {
		return x.TotalClicks
	}
	return 0
}

func (x *UserAnalytics) GetTotalUniqueVisitors() int64 {
	if x != nil {
		return x.TotalUniqueVisitors
	}
	return 0
}

func (x *UserAnalytics) GetTopUrls() []*URLStat {
	if x != nil {
		return x.TopUrls
	}
	return nil
}

func (x *UserAnalytics) GetClickTimeline() []*TimeSeriesPoint {
	if x != nil {
		return x.ClickTimeline
	}
	return nil
}

func (x *UserAnalytics) GetTopCountries() []*GeographicStat {
	if x != nil {
		return x.TopCountries
	}
	return nil
}

func (x *UserAnalytics) GetTopReferrers() []*ReferrerStat {
	if x != nil {
		return x.TopReferrers
	}
	return nil
}

type GetUserAnalyticsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *common.Response       `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Analytics     *UserAnalytics         `protobuf:"bytes,2,opt,name=analytics,proto3" json:"analytics,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserAnalyticsResponse) Reset() {
	*x = GetUserAnalyticsResponse{}
	mi := &file_analytics_analytics_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserAnalyticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserAnalyticsResponse) ProtoMessage() {}

func (x *GetUserAnalyticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserAnalyticsResponse.ProtoReflect.Descriptor instead.
func (*GetUserAnalyticsResponse) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{8}
}

func (x *GetUserAnalyticsResponse) GetStatus() *common.Response {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetUserAnalyticsResponse) GetAnalytics() *UserAnalytics {
	if x != nil {
		return x.Analytics
	}
	return nil
}

// Real-time analytics
type GetRealTimeAnalyticsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                 // Get real-time data for user's URLs
	LastMinutes   int32                  `protobuf:"varint,2,opt,name=last_minutes,json=lastMinutes,proto3" json:"last_minutes,omitempty"` // Last N minutes (default: 60)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRealTimeAnalyticsRequest) Reset() {
	*x = GetRealTimeAnalyticsRequest{}
	mi := &file_analytics_analytics_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRealTimeAnalyticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRealTimeAnalyticsRequest) ProtoMessage() {}

func (x *GetRealTimeAnalyticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRealTimeAnalyticsRequest.ProtoReflect.Descriptor instead.
func (*GetRealTimeAnalyticsRequest) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{9}
}

func (x *GetRealTimeAnalyticsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetRealTimeAnalyticsRequest) GetLastMinutes() int32 {
	if x != nil {
		return x.LastMinutes
	}
	return 0
}

type RealTimeAnalytics struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ActiveSessions   int64                  `protobuf:"varint,1,opt,name=active_sessions,json=activeSessions,proto3" json:"active_sessions,omitempty"` // Current active sessions
	ClicksLastHour   int64                  `protobuf:"varint,2,opt,name=clicks_last_hour,json=clicksLastHour,proto3" json:"clicks_last_hour,omitempty"`
	ClicksLastMinute int64                  `protobuf:"varint,3,opt,name=clicks_last_minute,json=clicksLastMinute,proto3" json:"clicks_last_minute,omitempty"`
	// Recent clicks stream
	RecentClicks []*ClickEvent `protobuf:"bytes,4,rep,name=recent_clicks,json=recentClicks,proto3" json:"recent_clicks,omitempty"`
	// Live counters
	ActiveUrls    []*URLStat `protobuf:"bytes,5,rep,name=active_urls,json=activeUrls,proto3" json:"active_urls,omitempty"` // URLs with recent activity
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RealTimeAnalytics) Reset() {
	*x = RealTimeAnalytics{}
	mi := &file_analytics_analytics_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RealTimeAnalytics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealTimeAnalytics) ProtoMessage() {}

func (x *RealTimeAnalytics) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealTimeAnalytics.ProtoReflect.Descriptor instead.
func (*RealTimeAnalytics) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{10}
}

func (x *RealTimeAnalytics) GetActiveSessions() int64 {
	if x != nil {
		return x.ActiveSessions
	}
	return 0
}

func (x *RealTimeAnalytics) GetClicksLastHour() int64 {
	if x != nil {
		return x.ClicksLastHour
	}
	return 0
}

func (x *RealTimeAnalytics) GetClicksLastMinute() int64 {
	if x != nil {
		return x.ClicksLastMinute
	}
	return 0
}

func (x *RealTimeAnalytics) GetRecentClicks() []*ClickEvent {
	if x != nil {
		return x.RecentClicks
	}
	return nil
}

func (x *RealTimeAnalytics) GetActiveUrls() []*URLStat {
	if x != nil {
		return x.ActiveUrls
	}
	return nil
}

type GetRealTimeAnalyticsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *common.Response       `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Analytics     *RealTimeAnalytics     `protobuf:"bytes,2,opt,name=analytics,proto3" json:"analytics,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRealTimeAnalyticsResponse) Reset() {
	*x = GetRealTimeAnalyticsResponse{}
	mi := &file_analytics_analytics_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRealTimeAnalyticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRealTimeAnalyticsResponse) ProtoMessage() {}

func (x *GetRealTimeAnalyticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRealTimeAnalyticsResponse.ProtoReflect.Descriptor instead.
func (*GetRealTimeAnalyticsResponse) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{11}
}

func (x *GetRealTimeAnalyticsResponse) GetStatus() *common.Response {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetRealTimeAnalyticsResponse) GetAnalytics() *RealTimeAnalytics {
	if x != nil {
		return x.Analytics
	}
	return nil
}

// Export analytics data
type ExportAnalyticsRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	UserId              string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UrlIds              []string               `protobuf:"bytes,2,rep,name=url_ids,json=urlIds,proto3" json:"url_ids,omitempty"` // Specific URLs or empty for all
	DateRange           *common.DateFilter     `protobuf:"bytes,3,opt,name=date_range,json=dateRange,proto3" json:"date_range,omitempty"`
	Format              string                 `protobuf:"bytes,4,opt,name=format,proto3" json:"format,omitempty"`                                                         // "csv", "json", "excel"
	IncludePersonalData bool                   `protobuf:"varint,5,opt,name=include_personal_data,json=includePersonalData,proto3" json:"include_personal_data,omitempty"` // Include IP addresses, etc.
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ExportAnalyticsRequest) Reset() {
	*x = ExportAnalyticsRequest{}
	mi := &file_analytics_analytics_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportAnalyticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportAnalyticsRequest) ProtoMessage() {}

func (x *ExportAnalyticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportAnalyticsRequest.ProtoReflect.Descriptor instead.
func (*ExportAnalyticsRequest) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{12}
}

func (x *ExportAnalyticsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ExportAnalyticsRequest) GetUrlIds() []string {
	if x != nil {
		return x.UrlIds
	}
	return nil
}

func (x *ExportAnalyticsRequest) GetDateRange() *common.DateFilter {
	if x != nil {
		return x.DateRange
	}
	return nil
}

func (x *ExportAnalyticsRequest) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *ExportAnalyticsRequest) GetIncludePersonalData() bool {
	if x != nil {
		return x.IncludePersonalData
	}
	return false
}

type ExportAnalyticsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *common.Response       `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	DownloadUrl   string                 `protobuf:"bytes,2,opt,name=download_url,json=downloadUrl,proto3" json:"download_url,omitempty"` // Pre-signed URL for download
	ExpiresAt     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExportAnalyticsResponse) Reset() {
	*x = ExportAnalyticsResponse{}
	mi := &file_analytics_analytics_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportAnalyticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportAnalyticsResponse) ProtoMessage() {}

func (x *ExportAnalyticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportAnalyticsResponse.ProtoReflect.Descriptor instead.
func (*ExportAnalyticsResponse) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{13}
}

func (x *ExportAnalyticsResponse) GetStatus() *common.Response {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ExportAnalyticsResponse) GetDownloadUrl() string {
	if x != nil {
		return x.DownloadUrl
	}
	return ""
}

func (x *ExportAnalyticsResponse) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

// Supporting message types
type TimeSeriesPoint struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Timestamp      *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Value          int64                  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	UniqueVisitors int64                  `protobuf:"varint,3,opt,name=unique_visitors,json=uniqueVisitors,proto3" json:"unique_visitors,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TimeSeriesPoint) Reset() {
	*x = TimeSeriesPoint{}
	mi := &file_analytics_analytics_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimeSeriesPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeSeriesPoint) ProtoMessage() {}

func (x *TimeSeriesPoint) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeSeriesPoint.ProtoReflect.Descriptor instead.
func (*TimeSeriesPoint) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{14}
}

func (x *TimeSeriesPoint) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *TimeSeriesPoint) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *TimeSeriesPoint) GetUniqueVisitors() int64 {
	if x != nil {
		return x.UniqueVisitors
	}
	return 0
}

type GeographicStat struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Name           string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // Country/city name
	Code           string                 `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"` // Country/city code
	Clicks         int64                  `protobuf:"varint,3,opt,name=clicks,proto3" json:"clicks,omitempty"`
	UniqueVisitors int64                  `protobuf:"varint,4,opt,name=unique_visitors,json=uniqueVisitors,proto3" json:"unique_visitors,omitempty"`
	Percentage     float64                `protobuf:"fixed64,5,opt,name=percentage,proto3" json:"percentage,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GeographicStat) Reset() {
	*x = GeographicStat{}
	mi := &file_analytics_analytics_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GeographicStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeographicStat) ProtoMessage() {}

func (x *GeographicStat) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeographicStat.ProtoReflect.Descriptor instead.
func (*GeographicStat) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{15}
}

func (x *GeographicStat) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GeographicStat) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GeographicStat) GetClicks() int64 {
	if x != nil {
		return x.Clicks
	}
	return 0
}

func (x *GeographicStat) GetUniqueVisitors() int64 {
	if x != nil {
		return x.UniqueVisitors
	}
	return 0
}

func (x *GeographicStat) GetPercentage() float64 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

type TechnologyStat struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Name           string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`       // Browser/OS/device name
	Version        string                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"` // Version if applicable
	Clicks         int64                  `protobuf:"varint,3,opt,name=clicks,proto3" json:"clicks,omitempty"`
	UniqueVisitors int64                  `protobuf:"varint,4,opt,name=unique_visitors,json=uniqueVisitors,proto3" json:"unique_visitors,omitempty"`
	Percentage     float64                `protobuf:"fixed64,5,opt,name=percentage,proto3" json:"percentage,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TechnologyStat) Reset() {
	*x = TechnologyStat{}
	mi := &file_analytics_analytics_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TechnologyStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TechnologyStat) ProtoMessage() {}

func (x *TechnologyStat) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TechnologyStat.ProtoReflect.Descriptor instead.
func (*TechnologyStat) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{16}
}

func (x *TechnologyStat) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TechnologyStat) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *TechnologyStat) GetClicks() int64 {
	if x != nil {
		return x.Clicks
	}
	return 0
}

func (x *TechnologyStat) GetUniqueVisitors() int64 {
	if x != nil {
		return x.UniqueVisitors
	}
	return 0
}

func (x *TechnologyStat) GetPercentage() float64 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

type ReferrerStat struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Domain         string                 `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"` // Referring domain
	Url            string                 `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`       // Full referring URL (if available)
	Clicks         int64                  `protobuf:"varint,3,opt,name=clicks,proto3" json:"clicks,omitempty"`
	UniqueVisitors int64                  `protobuf:"varint,4,opt,name=unique_visitors,json=uniqueVisitors,proto3" json:"unique_visitors,omitempty"`
	Percentage     float64                `protobuf:"fixed64,5,opt,name=percentage,proto3" json:"percentage,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ReferrerStat) Reset() {
	*x = ReferrerStat{}
	mi := &file_analytics_analytics_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReferrerStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferrerStat) ProtoMessage() {}

func (x *ReferrerStat) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferrerStat.ProtoReflect.Descriptor instead.
func (*ReferrerStat) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{17}
}

func (x *ReferrerStat) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ReferrerStat) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ReferrerStat) GetClicks() int64 {
	if x != nil {
		return x.Clicks
	}
	return 0
}

func (x *ReferrerStat) GetUniqueVisitors() int64 {
	if x != nil {
		return x.UniqueVisitors
	}
	return 0
}

func (x *ReferrerStat) GetPercentage() float64 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

type UTMStat struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Name           string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // UTM source/medium/campaign name
	Clicks         int64                  `protobuf:"varint,2,opt,name=clicks,proto3" json:"clicks,omitempty"`
	UniqueVisitors int64                  `protobuf:"varint,3,opt,name=unique_visitors,json=uniqueVisitors,proto3" json:"unique_visitors,omitempty"`
	Percentage     float64                `protobuf:"fixed64,4,opt,name=percentage,proto3" json:"percentage,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UTMStat) Reset() {
	*x = UTMStat{}
	mi := &file_analytics_analytics_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UTMStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UTMStat) ProtoMessage() {}

func (x *UTMStat) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UTMStat.ProtoReflect.Descriptor instead.
func (*UTMStat) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{18}
}

func (x *UTMStat) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UTMStat) GetClicks() int64 {
	if x != nil {
		return x.Clicks
	}
	return 0
}

func (x *UTMStat) GetUniqueVisitors() int64 {
	if x != nil {
		return x.UniqueVisitors
	}
	return 0
}

func (x *UTMStat) GetPercentage() float64 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

type HourStat struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Hour           int32                  `protobuf:"varint,1,opt,name=hour,proto3" json:"hour,omitempty"` // 0-23
	Clicks         int64                  `protobuf:"varint,2,opt,name=clicks,proto3" json:"clicks,omitempty"`
	UniqueVisitors int64                  `protobuf:"varint,3,opt,name=unique_visitors,json=uniqueVisitors,proto3" json:"unique_visitors,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *HourStat) Reset() {
	*x = HourStat{}
	mi := &file_analytics_analytics_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HourStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HourStat) ProtoMessage() {}

func (x *HourStat) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HourStat.ProtoReflect.Descriptor instead.
func (*HourStat) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{19}
}

func (x *HourStat) GetHour() int32 {
	if x != nil {
		return x.Hour
	}
	return 0
}

func (x *HourStat) GetClicks() int64 {
	if x != nil {
		return x.Clicks
	}
	return 0
}

func (x *HourStat) GetUniqueVisitors() int64 {
	if x != nil {
		return x.UniqueVisitors
	}
	return 0
}

type DayStat struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	DayOfWeek      int32                  `protobuf:"varint,1,opt,name=day_of_week,json=dayOfWeek,proto3" json:"day_of_week,omitempty"` // 1-7 (1 = Monday)
	Clicks         int64                  `protobuf:"varint,2,opt,name=clicks,proto3" json:"clicks,omitempty"`
	UniqueVisitors int64                  `protobuf:"varint,3,opt,name=unique_visitors,json=uniqueVisitors,proto3" json:"unique_visitors,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *DayStat) Reset() {
	*x = DayStat{}
	mi := &file_analytics_analytics_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DayStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DayStat) ProtoMessage() {}

func (x *DayStat) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DayStat.ProtoReflect.Descriptor instead.
func (*DayStat) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{20}
}

func (x *DayStat) GetDayOfWeek() int32 {
	if x != nil {
		return x.DayOfWeek
	}
	return 0
}

func (x *DayStat) GetClicks() int64 {
	if x != nil {
		return x.Clicks
	}
	return 0
}

func (x *DayStat) GetUniqueVisitors() int64 {
	if x != nil {
		return x.UniqueVisitors
	}
	return 0
}

type URLStat struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	UrlId          string                 `protobuf:"bytes,1,opt,name=url_id,json=urlId,proto3" json:"url_id,omitempty"`
	Title          string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	ShortUrl       string                 `protobuf:"bytes,3,opt,name=short_url,json=shortUrl,proto3" json:"short_url,omitempty"`
	Clicks         int64                  `protobuf:"varint,4,opt,name=clicks,proto3" json:"clicks,omitempty"`
	UniqueVisitors int64                  `protobuf:"varint,5,opt,name=unique_visitors,json=uniqueVisitors,proto3" json:"unique_visitors,omitempty"`
	LastClick      *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=last_click,json=lastClick,proto3" json:"last_click,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *URLStat) Reset() {
	*x = URLStat{}
	mi := &file_analytics_analytics_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *URLStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*URLStat) ProtoMessage() {}

func (x *URLStat) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use URLStat.ProtoReflect.Descriptor instead.
func (*URLStat) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{21}
}

func (x *URLStat) GetUrlId() string {
	if x != nil {
		return x.UrlId
	}
	return ""
}

func (x *URLStat) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *URLStat) GetShortUrl() string {
	if x != nil {
		return x.ShortUrl
	}
	return ""
}

func (x *URLStat) GetClicks() int64 {
	if x != nil {
		return x.Clicks
	}
	return 0
}

func (x *URLStat) GetUniqueVisitors() int64 {
	if x != nil {
		return x.UniqueVisitors
	}
	return 0
}

func (x *URLStat) GetLastClick() *timestamppb.Timestamp {
	if x != nil {
		return x.LastClick
	}
	return nil
}

func (x *URLStat) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

// Streaming for real-time updates
type StreamAnalyticsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UrlIds        []string               `protobuf:"bytes,2,rep,name=url_ids,json=urlIds,proto3" json:"url_ids,omitempty"` // Stream specific URLs or all user URLs
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamAnalyticsRequest) Reset() {
	*x = StreamAnalyticsRequest{}
	mi := &file_analytics_analytics_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamAnalyticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamAnalyticsRequest) ProtoMessage() {}

func (x *StreamAnalyticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamAnalyticsRequest.ProtoReflect.Descriptor instead.
func (*StreamAnalyticsRequest) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{22}
}

func (x *StreamAnalyticsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *StreamAnalyticsRequest) GetUrlIds() []string {
	if x != nil {
		return x.UrlIds
	}
	return nil
}

type StreamAnalyticsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Event:
	//
	//	*StreamAnalyticsResponse_NewClick
	//	*StreamAnalyticsResponse_UrlUpdate
	Event         isStreamAnalyticsResponse_Event `protobuf_oneof:"event"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamAnalyticsResponse) Reset() {
	*x = StreamAnalyticsResponse{}
	mi := &file_analytics_analytics_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamAnalyticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamAnalyticsResponse) ProtoMessage() {}

func (x *StreamAnalyticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_analytics_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamAnalyticsResponse.ProtoReflect.Descriptor instead.
func (*StreamAnalyticsResponse) Descriptor() ([]byte, []int) {
	return file_analytics_analytics_service_proto_rawDescGZIP(), []int{23}
}

func (x *StreamAnalyticsResponse) GetEvent() isStreamAnalyticsResponse_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *StreamAnalyticsResponse) GetNewClick() *ClickEvent {
	if x != nil {
		if x, ok := x.Event.(*StreamAnalyticsResponse_NewClick); ok {
			return x.NewClick
		}
	}
	return nil
}

func (x *StreamAnalyticsResponse) GetUrlUpdate() *URLStat {
	if x != nil {
		if x, ok := x.Event.(*StreamAnalyticsResponse_UrlUpdate); ok {
			return x.UrlUpdate
		}
	}
	return nil
}

type isStreamAnalyticsResponse_Event interface {
	isStreamAnalyticsResponse_Event()
}

type StreamAnalyticsResponse_NewClick struct {
	NewClick *ClickEvent `protobuf:"bytes,1,opt,name=new_click,json=newClick,proto3,oneof"`
}

type StreamAnalyticsResponse_UrlUpdate struct {
	UrlUpdate *URLStat `protobuf:"bytes,2,opt,name=url_update,json=urlUpdate,proto3,oneof"`
}

func (*StreamAnalyticsResponse_NewClick) isStreamAnalyticsResponse_Event() {}

func (*StreamAnalyticsResponse_UrlUpdate) isStreamAnalyticsResponse_Event() {}

var File_analytics_analytics_service_proto protoreflect.FileDescriptor

var file_analytics_analytics_service_proto_rawDesc = string([]byte{
	0x0a, 0x21, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x09, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xc0, 0x04, 0x0a, 0x0a, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x75, 0x72, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x75, 0x72, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x72,
	0x6f, 0x77, 0x73, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x72, 0x6f,
	0x77, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x6f, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x6d, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x74, 0x6d,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x74, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x74, 0x6d, 0x5f,
	0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x74,
	0x6d, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x74, 0x6d, 0x5f, 0x63,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75,
	0x74, 0x6d, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x74,
	0x6d, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x74,
	0x6d, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x74, 0x6d, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x74, 0x6d, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xda, 0x02, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a,
	0x06, 0x75, 0x72, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75,
	0x72, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x74, 0x6d, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x74, 0x6d, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x74, 0x6d, 0x5f, 0x6d, 0x65, 0x64,
	0x69, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x74, 0x6d, 0x4d, 0x65,
	0x64, 0x69, 0x75, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x74, 0x6d, 0x5f, 0x63, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x74, 0x6d, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x74, 0x6d, 0x5f, 0x74,
	0x65, 0x72, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x74, 0x6d, 0x54, 0x65,
	0x72, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x74, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x74, 0x6d, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x22, 0x5a, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x6c, 0x69,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0x9d, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x55, 0x52, 0x4c, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x75, 0x72,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x72, 0x6c, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x0a, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x22,
	0xec, 0x05, 0x0a, 0x0c, 0x55, 0x52, 0x4c, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x12, 0x15, 0x0a, 0x06, 0x75, 0x72, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x75, 0x72, 0x6c, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x56, 0x69, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x54, 0x69,
	0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x31, 0x0a, 0x06, 0x63, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x47, 0x65, 0x6f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x52, 0x06, 0x63, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x53, 0x74, 0x61, 0x74, 0x52,
	0x08, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x73, 0x12, 0x46, 0x0a, 0x11, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x53, 0x74, 0x61, 0x74, 0x52,
	0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x73, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x54,
	0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x53, 0x74, 0x61, 0x74, 0x52, 0x07, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x73, 0x12, 0x33, 0x0a,
	0x0b, 0x75, 0x74, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x55,
	0x54, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0a, 0x75, 0x74, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x12, 0x37, 0x0a, 0x0d, 0x75, 0x74, 0x6d, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x55, 0x54, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0c, 0x75,
	0x74, 0x6d, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x0e, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x48, 0x6f, 0x75, 0x72, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x73,
	0x42, 0x79, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x36, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x73,
	0x5f, 0x62, 0x79, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x44, 0x61, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x42, 0x79, 0x44, 0x61, 0x79, 0x22, 0x7a,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x55, 0x52, 0x4c, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x55, 0x52, 0x4c, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x09, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x22, 0xb9, 0x01, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x31, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a,
	0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x22, 0x8e, 0x03, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x72, 0x6c, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6c, 0x69,
	0x63, 0x6b, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x56,
	0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x2d, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x5f, 0x75,
	0x72, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x55, 0x52, 0x4c, 0x53, 0x74, 0x61, 0x74, 0x52, 0x07, 0x74,
	0x6f, 0x70, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x63,
	0x6b, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x74, 0x6f, 0x70,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x47, 0x65, 0x6f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0c, 0x74, 0x6f, 0x70,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0d, 0x74, 0x6f, 0x70,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0c, 0x74, 0x6f, 0x70, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x73, 0x22, 0x7c, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a,
	0x09, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x09, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x22, 0x59, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x61, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73,
	0x22, 0x85, 0x02, 0x0a, 0x11, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x28, 0x0a, 0x10, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68,
	0x6f, 0x75, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x63, 0x6b,
	0x73, 0x4c, 0x61, 0x73, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6c, 0x69,
	0x63, 0x6b, 0x73, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x4c, 0x61, 0x73,
	0x74, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x69,
	0x63, 0x6b, 0x73, 0x12, 0x33, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x72,
	0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x55, 0x52, 0x4c, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x55, 0x72, 0x6c, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x09, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x22,
	0xc9, 0x01, 0x0a, 0x16, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x72, 0x6c, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x75, 0x72, 0x6c, 0x49, 0x64, 0x73, 0x12, 0x31, 0x0a, 0x0a,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0xa1, 0x01, 0x0a, 0x17,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x55, 0x72, 0x6c, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f,
	0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x22,
	0x8a, 0x01, 0x0a, 0x0f, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x76, 0x69,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x75, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x56, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x99, 0x01, 0x0a,
	0x0e, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x63, 0x6b,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x56, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x0e, 0x54, 0x65, 0x63,
	0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x53, 0x74, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x69,
	0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x63, 0x6b,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x76, 0x69, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x75, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x56, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x0c, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x56, 0x69,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0x7e, 0x0a, 0x07, 0x55, 0x54, 0x4d, 0x53, 0x74, 0x61,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x56, 0x69,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0x5f, 0x0a, 0x08, 0x48, 0x6f, 0x75, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x56,
	0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x6a, 0x0a, 0x07, 0x44, 0x61, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65,
	0x65, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x56, 0x69, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x73, 0x22, 0x8a, 0x02, 0x0a, 0x07, 0x55, 0x52, 0x4c, 0x53, 0x74, 0x61, 0x74, 0x12,
	0x15, 0x0a, 0x06, 0x75, 0x72, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x75, 0x72, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x69,
	0x63, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x63, 0x6b,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x76, 0x69, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x75, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x56, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74,
	0x43, 0x6c, 0x69, 0x63, 0x6b, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x22, 0x4a, 0x0a, 0x16, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x72, 0x6c, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x75, 0x72, 0x6c, 0x49, 0x64, 0x73, 0x22, 0x8d, 0x01, 0x0a,
	0x17, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f,
	0x63, 0x6c, 0x69, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x12, 0x33,
	0x0a, 0x0a, 0x75, 0x72, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x55,
	0x52, 0x4c, 0x53, 0x74, 0x61, 0x74, 0x48, 0x00, 0x52, 0x09, 0x75, 0x72, 0x6c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x32, 0xfe, 0x04, 0x0a,
	0x10, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x4c, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x6c, 0x69, 0x63, 0x6b,
	0x12, 0x1d, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x58, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55, 0x52, 0x4c, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x12, 0x21, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x52, 0x4c, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x52, 0x4c, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x12, 0x22, 0x2e,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x52, 0x65, 0x61,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x12, 0x26,
	0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x58, 0x0a, 0x0f, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x12, 0x21, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x0f, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x12, 0x21, 0x2e, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x46, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x12, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3c, 0x5a,
	0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x75, 0x72, 0x6c, 0x2d,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2d, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65,
	0x6e, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
})

var (
	file_analytics_analytics_service_proto_rawDescOnce sync.Once
	file_analytics_analytics_service_proto_rawDescData []byte
)

func file_analytics_analytics_service_proto_rawDescGZIP() []byte {
	file_analytics_analytics_service_proto_rawDescOnce.Do(func() {
		file_analytics_analytics_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_analytics_analytics_service_proto_rawDesc), len(file_analytics_analytics_service_proto_rawDesc)))
	})
	return file_analytics_analytics_service_proto_rawDescData
}

var file_analytics_analytics_service_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_analytics_analytics_service_proto_goTypes = []any{
	(*ClickEvent)(nil),                   // 0: analytics.ClickEvent
	(*RecordClickRequest)(nil),           // 1: analytics.RecordClickRequest
	(*RecordClickResponse)(nil),          // 2: analytics.RecordClickResponse
	(*GetURLAnalyticsRequest)(nil),       // 3: analytics.GetURLAnalyticsRequest
	(*URLAnalytics)(nil),                 // 4: analytics.URLAnalytics
	(*GetURLAnalyticsResponse)(nil),      // 5: analytics.GetURLAnalyticsResponse
	(*GetUserAnalyticsRequest)(nil),      // 6: analytics.GetUserAnalyticsRequest
	(*UserAnalytics)(nil),                // 7: analytics.UserAnalytics
	(*GetUserAnalyticsResponse)(nil),     // 8: analytics.GetUserAnalyticsResponse
	(*GetRealTimeAnalyticsRequest)(nil),  // 9: analytics.GetRealTimeAnalyticsRequest
	(*RealTimeAnalytics)(nil),            // 10: analytics.RealTimeAnalytics
	(*GetRealTimeAnalyticsResponse)(nil), // 11: analytics.GetRealTimeAnalyticsResponse
	(*ExportAnalyticsRequest)(nil),       // 12: analytics.ExportAnalyticsRequest
	(*ExportAnalyticsResponse)(nil),      // 13: analytics.ExportAnalyticsResponse
	(*TimeSeriesPoint)(nil),              // 14: analytics.TimeSeriesPoint
	(*GeographicStat)(nil),               // 15: analytics.GeographicStat
	(*TechnologyStat)(nil),               // 16: analytics.TechnologyStat
	(*ReferrerStat)(nil),                 // 17: analytics.ReferrerStat
	(*UTMStat)(nil),                      // 18: analytics.UTMStat
	(*HourStat)(nil),                     // 19: analytics.HourStat
	(*DayStat)(nil),                      // 20: analytics.DayStat
	(*URLStat)(nil),                      // 21: analytics.URLStat
	(*StreamAnalyticsRequest)(nil),       // 22: analytics.StreamAnalyticsRequest
	(*StreamAnalyticsResponse)(nil),      // 23: analytics.StreamAnalyticsResponse
	(*timestamppb.Timestamp)(nil),        // 24: google.protobuf.Timestamp
	(*common.Response)(nil),              // 25: common.Response
	(*common.DateFilter)(nil),            // 26: common.DateFilter
	(*common.PaginationRequest)(nil),     // 27: common.PaginationRequest
	(*common.HealthCheckRequest)(nil),    // 28: common.HealthCheckRequest
	(*common.HealthCheckResponse)(nil),   // 29: common.HealthCheckResponse
}
var file_analytics_analytics_service_proto_depIdxs = []int32{
	24, // 0: analytics.ClickEvent.clicked_at:type_name -> google.protobuf.Timestamp
	25, // 1: analytics.RecordClickResponse.status:type_name -> common.Response
	26, // 2: analytics.GetURLAnalyticsRequest.date_range:type_name -> common.DateFilter
	14, // 3: analytics.URLAnalytics.click_timeline:type_name -> analytics.TimeSeriesPoint
	15, // 4: analytics.URLAnalytics.countries:type_name -> analytics.GeographicStat
	15, // 5: analytics.URLAnalytics.cities:type_name -> analytics.GeographicStat
	16, // 6: analytics.URLAnalytics.browsers:type_name -> analytics.TechnologyStat
	16, // 7: analytics.URLAnalytics.operating_systems:type_name -> analytics.TechnologyStat
	16, // 8: analytics.URLAnalytics.devices:type_name -> analytics.TechnologyStat
	17, // 9: analytics.URLAnalytics.referrers:type_name -> analytics.ReferrerStat
	18, // 10: analytics.URLAnalytics.utm_sources:type_name -> analytics.UTMStat
	18, // 11: analytics.URLAnalytics.utm_campaigns:type_name -> analytics.UTMStat
	19, // 12: analytics.URLAnalytics.clicks_by_hour:type_name -> analytics.HourStat
	20, // 13: analytics.URLAnalytics.clicks_by_day:type_name -> analytics.DayStat
	25, // 14: analytics.GetURLAnalyticsResponse.status:type_name -> common.Response
	4,  // 15: analytics.GetURLAnalyticsResponse.analytics:type_name -> analytics.URLAnalytics
	26, // 16: analytics.GetUserAnalyticsRequest.date_range:type_name -> common.DateFilter
	27, // 17: analytics.GetUserAnalyticsRequest.pagination:type_name -> common.PaginationRequest
	21, // 18: analytics.UserAnalytics.top_urls:type_name -> analytics.URLStat
	14, // 19: analytics.UserAnalytics.click_timeline:type_name -> analytics.TimeSeriesPoint
	15, // 20: analytics.UserAnalytics.top_countries:type_name -> analytics.GeographicStat
	17, // 21: analytics.UserAnalytics.top_referrers:type_name -> analytics.ReferrerStat
	25, // 22: analytics.GetUserAnalyticsResponse.status:type_name -> common.Response
	7,  // 23: analytics.GetUserAnalyticsResponse.analytics:type_name -> analytics.UserAnalytics
	0,  // 24: analytics.RealTimeAnalytics.recent_clicks:type_name -> analytics.ClickEvent
	21, // 25: analytics.RealTimeAnalytics.active_urls:type_name -> analytics.URLStat
	25, // 26: analytics.GetRealTimeAnalyticsResponse.status:type_name -> common.Response
	10, // 27: analytics.GetRealTimeAnalyticsResponse.analytics:type_name -> analytics.RealTimeAnalytics
	26, // 28: analytics.ExportAnalyticsRequest.date_range:type_name -> common.DateFilter
	25, // 29: analytics.ExportAnalyticsResponse.status:type_name -> common.Response
	24, // 30: analytics.ExportAnalyticsResponse.expires_at:type_name -> google.protobuf.Timestamp
	24, // 31: analytics.TimeSeriesPoint.timestamp:type_name -> google.protobuf.Timestamp
	24, // 32: analytics.URLStat.last_click:type_name -> google.protobuf.Timestamp
	24, // 33: analytics.URLStat.created_at:type_name -> google.protobuf.Timestamp
	0,  // 34: analytics.StreamAnalyticsResponse.new_click:type_name -> analytics.ClickEvent
	21, // 35: analytics.StreamAnalyticsResponse.url_update:type_name -> analytics.URLStat
	1,  // 36: analytics.AnalyticsService.RecordClick:input_type -> analytics.RecordClickRequest
	3,  // 37: analytics.AnalyticsService.GetURLAnalytics:input_type -> analytics.GetURLAnalyticsRequest
	6,  // 38: analytics.AnalyticsService.GetUserAnalytics:input_type -> analytics.GetUserAnalyticsRequest
	9,  // 39: analytics.AnalyticsService.GetRealTimeAnalytics:input_type -> analytics.GetRealTimeAnalyticsRequest
	12, // 40: analytics.AnalyticsService.ExportAnalytics:input_type -> analytics.ExportAnalyticsRequest
	22, // 41: analytics.AnalyticsService.StreamAnalytics:input_type -> analytics.StreamAnalyticsRequest
	28, // 42: analytics.AnalyticsService.HealthCheck:input_type -> common.HealthCheckRequest
	2,  // 43: analytics.AnalyticsService.RecordClick:output_type -> analytics.RecordClickResponse
	5,  // 44: analytics.AnalyticsService.GetURLAnalytics:output_type -> analytics.GetURLAnalyticsResponse
	8,  // 45: analytics.AnalyticsService.GetUserAnalytics:output_type -> analytics.GetUserAnalyticsResponse
	11, // 46: analytics.AnalyticsService.GetRealTimeAnalytics:output_type -> analytics.GetRealTimeAnalyticsResponse
	13, // 47: analytics.AnalyticsService.ExportAnalytics:output_type -> analytics.ExportAnalyticsResponse
	23, // 48: analytics.AnalyticsService.StreamAnalytics:output_type -> analytics.StreamAnalyticsResponse
	29, // 49: analytics.AnalyticsService.HealthCheck:output_type -> common.HealthCheckResponse
	43, // [43:50] is the sub-list for method output_type
	36, // [36:43] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_analytics_analytics_service_proto_init() }
func file_analytics_analytics_service_proto_init() {
	if File_analytics_analytics_service_proto != nil {
		return
	}
	file_analytics_analytics_service_proto_msgTypes[23].OneofWrappers = []any{
		(*StreamAnalyticsResponse_NewClick)(nil),
		(*StreamAnalyticsResponse_UrlUpdate)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_analytics_analytics_service_proto_rawDesc), len(file_analytics_analytics_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_analytics_analytics_service_proto_goTypes,
		DependencyIndexes: file_analytics_analytics_service_proto_depIdxs,
		MessageInfos:      file_analytics_analytics_service_proto_msgTypes,
	}.Build()
	File_analytics_analytics_service_proto = out.File
	file_analytics_analytics_service_proto_goTypes = nil
	file_analytics_analytics_service_proto_depIdxs = nil
}
