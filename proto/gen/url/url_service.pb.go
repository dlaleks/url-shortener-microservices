// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: url/url_service.proto

package url

import (
	common "github.com/url-shortener-microservices/proto/gen/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// URL entity
type URL struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                      // Short code (e.g., "abc123")
	OriginalUrl string                 `protobuf:"bytes,2,opt,name=original_url,json=originalUrl,proto3" json:"original_url,omitempty"` // Full original URL
	ShortUrl    string                 `protobuf:"bytes,3,opt,name=short_url,json=shortUrl,proto3" json:"short_url,omitempty"`          // Complete short URL (domain + id)
	UserId      string                 `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                // Owner user ID (empty if anonymous)
	Title       string                 `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`                                // Optional custom title
	Description string                 `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`                    // Optional description
	// Metadata
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ExpiresAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"` // Optional expiration
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Statistics (cached from Analytics service)
	ClickCount   int64                  `protobuf:"varint,10,opt,name=click_count,json=clickCount,proto3" json:"click_count,omitempty"`
	LastAccessed *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=last_accessed,json=lastAccessed,proto3" json:"last_accessed,omitempty"`
	// Features
	IsActive      bool     `protobuf:"varint,12,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"` // Can be disabled by user/admin
	IsCustom      bool     `protobuf:"varint,13,opt,name=is_custom,json=isCustom,proto3" json:"is_custom,omitempty"` // Custom short code vs generated
	Password      string   `protobuf:"bytes,14,opt,name=password,proto3" json:"password,omitempty"`                  // Optional password protection (hashed)
	Tags          []string `protobuf:"bytes,15,rep,name=tags,proto3" json:"tags,omitempty"`                          // User-defined tags
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *URL) Reset() {
	*x = URL{}
	mi := &file_url_url_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *URL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*URL) ProtoMessage() {}

func (x *URL) ProtoReflect() protoreflect.Message {
	mi := &file_url_url_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use URL.ProtoReflect.Descriptor instead.
func (*URL) Descriptor() ([]byte, []int) {
	return file_url_url_service_proto_rawDescGZIP(), []int{0}
}

func (x *URL) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *URL) GetOriginalUrl() string {
	if x != nil {
		return x.OriginalUrl
	}
	return ""
}

func (x *URL) GetShortUrl() string {
	if x != nil {
		return x.ShortUrl
	}
	return ""
}

func (x *URL) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *URL) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *URL) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *URL) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *URL) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

func (x *URL) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *URL) GetClickCount() int64 {
	if x != nil {
		return x.ClickCount
	}
	return 0
}

func (x *URL) GetLastAccessed() *timestamppb.Timestamp {
	if x != nil {
		return x.LastAccessed
	}
	return nil
}

func (x *URL) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *URL) GetIsCustom() bool {
	if x != nil {
		return x.IsCustom
	}
	return false
}

func (x *URL) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *URL) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// Request messages
type CreateURLRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OriginalUrl   string                 `protobuf:"bytes,1,opt,name=original_url,json=originalUrl,proto3" json:"original_url,omitempty"` // Required: URL to shorten
	CustomCode    string                 `protobuf:"bytes,2,opt,name=custom_code,json=customCode,proto3" json:"custom_code,omitempty"`    // Optional: preferred short code
	UserId        string                 `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                // Optional: user ID
	Title         string                 `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`                                // Optional: custom title
	Description   string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`                    // Optional: description
	Password      string                 `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`                          // Optional: password protection
	ExpiresAt     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`       // Optional: expiration date
	Tags          []string               `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`                                  // Optional: tags
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateURLRequest) Reset() {
	*x = CreateURLRequest{}
	mi := &file_url_url_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateURLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateURLRequest) ProtoMessage() {}

func (x *CreateURLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_url_url_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateURLRequest.ProtoReflect.Descriptor instead.
func (*CreateURLRequest) Descriptor() ([]byte, []int) {
	return file_url_url_service_proto_rawDescGZIP(), []int{1}
}

func (x *CreateURLRequest) GetOriginalUrl() string {
	if x != nil {
		return x.OriginalUrl
	}
	return ""
}

func (x *CreateURLRequest) GetCustomCode() string {
	if x != nil {
		return x.CustomCode
	}
	return ""
}

func (x *CreateURLRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateURLRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateURLRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateURLRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CreateURLRequest) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

func (x *CreateURLRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type CreateURLResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *common.Response       `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Url           *URL                   `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateURLResponse) Reset() {
	*x = CreateURLResponse{}
	mi := &file_url_url_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateURLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateURLResponse) ProtoMessage() {}

func (x *CreateURLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_url_url_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateURLResponse.ProtoReflect.Descriptor instead.
func (*CreateURLResponse) Descriptor() ([]byte, []int) {
	return file_url_url_service_proto_rawDescGZIP(), []int{2}
}

func (x *CreateURLResponse) GetStatus() *common.Response {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CreateURLResponse) GetUrl() *URL {
	if x != nil {
		return x.Url
	}
	return nil
}

type GetURLRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                          // Short code
	Password      string                 `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`                              // If password protected
	IncludeStats  bool                   `protobuf:"varint,3,opt,name=include_stats,json=includeStats,proto3" json:"include_stats,omitempty"` // Include click statistics
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetURLRequest) Reset() {
	*x = GetURLRequest{}
	mi := &file_url_url_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetURLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetURLRequest) ProtoMessage() {}

func (x *GetURLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_url_url_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetURLRequest.ProtoReflect.Descriptor instead.
func (*GetURLRequest) Descriptor() ([]byte, []int) {
	return file_url_url_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetURLRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetURLRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *GetURLRequest) GetIncludeStats() bool {
	if x != nil {
		return x.IncludeStats
	}
	return false
}

type GetURLResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Status           *common.Response       `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Url              *URL                   `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	PasswordRequired bool                   `protobuf:"varint,3,opt,name=password_required,json=passwordRequired,proto3" json:"password_required,omitempty"` // True if password needed but not provided
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetURLResponse) Reset() {
	*x = GetURLResponse{}
	mi := &file_url_url_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetURLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetURLResponse) ProtoMessage() {}

func (x *GetURLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_url_url_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetURLResponse.ProtoReflect.Descriptor instead.
func (*GetURLResponse) Descriptor() ([]byte, []int) {
	return file_url_url_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetURLResponse) GetStatus() *common.Response {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetURLResponse) GetUrl() *URL {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *GetURLResponse) GetPasswordRequired() bool {
	if x != nil {
		return x.PasswordRequired
	}
	return false
}

type UpdateURLRequest struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Id     string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                       // Short code to update
	UserId string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // Must match owner
	// Optional fields to update
	Title         *string                `protobuf:"bytes,3,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Description   *string                `protobuf:"bytes,4,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Password      *string                `protobuf:"bytes,5,opt,name=password,proto3,oneof" json:"password,omitempty"` // Set/change/remove password
	IsActive      *bool                  `protobuf:"varint,6,opt,name=is_active,json=isActive,proto3,oneof" json:"is_active,omitempty"`
	Tags          []string               `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
	ExpiresAt     *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=expires_at,json=expiresAt,proto3,oneof" json:"expires_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateURLRequest) Reset() {
	*x = UpdateURLRequest{}
	mi := &file_url_url_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateURLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateURLRequest) ProtoMessage() {}

func (x *UpdateURLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_url_url_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateURLRequest.ProtoReflect.Descriptor instead.
func (*UpdateURLRequest) Descriptor() ([]byte, []int) {
	return file_url_url_service_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateURLRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateURLRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateURLRequest) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *UpdateURLRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UpdateURLRequest) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *UpdateURLRequest) GetIsActive() bool {
	if x != nil && x.IsActive != nil {
		return *x.IsActive
	}
	return false
}

func (x *UpdateURLRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *UpdateURLRequest) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

type UpdateURLResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *common.Response       `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Url           *URL                   `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateURLResponse) Reset() {
	*x = UpdateURLResponse{}
	mi := &file_url_url_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateURLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateURLResponse) ProtoMessage() {}

func (x *UpdateURLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_url_url_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateURLResponse.ProtoReflect.Descriptor instead.
func (*UpdateURLResponse) Descriptor() ([]byte, []int) {
	return file_url_url_service_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateURLResponse) GetStatus() *common.Response {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *UpdateURLResponse) GetUrl() *URL {
	if x != nil {
		return x.Url
	}
	return nil
}

type DeleteURLRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // Must match owner or be admin
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteURLRequest) Reset() {
	*x = DeleteURLRequest{}
	mi := &file_url_url_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteURLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteURLRequest) ProtoMessage() {}

func (x *DeleteURLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_url_url_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteURLRequest.ProtoReflect.Descriptor instead.
func (*DeleteURLRequest) Descriptor() ([]byte, []int) {
	return file_url_url_service_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteURLRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteURLRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type DeleteURLResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *common.Response       `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteURLResponse) Reset() {
	*x = DeleteURLResponse{}
	mi := &file_url_url_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteURLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteURLResponse) ProtoMessage() {}

func (x *DeleteURLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_url_url_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteURLResponse.ProtoReflect.Descriptor instead.
func (*DeleteURLResponse) Descriptor() ([]byte, []int) {
	return file_url_url_service_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteURLResponse) GetStatus() *common.Response {
	if x != nil {
		return x.Status
	}
	return nil
}

// List URLs for a user
type ListURLsRequest struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	UserId        string                    `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Pagination    *common.PaginationRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Search        string                    `protobuf:"bytes,3,opt,name=search,proto3" json:"search,omitempty"`                            // Search in title, description, tags
	Tags          []string                  `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`                                // Filter by tags
	ActiveOnly    bool                      `protobuf:"varint,5,opt,name=active_only,json=activeOnly,proto3" json:"active_only,omitempty"` // Show only active URLs
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListURLsRequest) Reset() {
	*x = ListURLsRequest{}
	mi := &file_url_url_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListURLsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListURLsRequest) ProtoMessage() {}

func (x *ListURLsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_url_url_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListURLsRequest.ProtoReflect.Descriptor instead.
func (*ListURLsRequest) Descriptor() ([]byte, []int) {
	return file_url_url_service_proto_rawDescGZIP(), []int{9}
}

func (x *ListURLsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ListURLsRequest) GetPagination() *common.PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListURLsRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *ListURLsRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ListURLsRequest) GetActiveOnly() bool {
	if x != nil {
		return x.ActiveOnly
	}
	return false
}

type ListURLsResponse struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Status        *common.Response           `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Urls          []*URL                     `protobuf:"bytes,2,rep,name=urls,proto3" json:"urls,omitempty"`
	Pagination    *common.PaginationResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListURLsResponse) Reset() {
	*x = ListURLsResponse{}
	mi := &file_url_url_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListURLsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListURLsResponse) ProtoMessage() {}

func (x *ListURLsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_url_url_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListURLsResponse.ProtoReflect.Descriptor instead.
func (*ListURLsResponse) Descriptor() ([]byte, []int) {
	return file_url_url_service_proto_rawDescGZIP(), []int{10}
}

func (x *ListURLsResponse) GetStatus() *common.Response {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListURLsResponse) GetUrls() []*URL {
	if x != nil {
		return x.Urls
	}
	return nil
}

func (x *ListURLsResponse) GetPagination() *common.PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// Validate URL request (check if URL is valid and accessible)
type ValidateURLRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Url           string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidateURLRequest) Reset() {
	*x = ValidateURLRequest{}
	mi := &file_url_url_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateURLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateURLRequest) ProtoMessage() {}

func (x *ValidateURLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_url_url_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateURLRequest.ProtoReflect.Descriptor instead.
func (*ValidateURLRequest) Descriptor() ([]byte, []int) {
	return file_url_url_service_proto_rawDescGZIP(), []int{11}
}

func (x *ValidateURLRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type ValidateURLResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *common.Response       `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	IsValid       bool                   `protobuf:"varint,2,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	IsAccessible  bool                   `protobuf:"varint,3,opt,name=is_accessible,json=isAccessible,proto3" json:"is_accessible,omitempty"`   // Can be reached via HTTP
	DetectedTitle string                 `protobuf:"bytes,4,opt,name=detected_title,json=detectedTitle,proto3" json:"detected_title,omitempty"` // Scraped page title
	ContentType   string                 `protobuf:"bytes,5,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`       // MIME type
	StatusCode    int32                  `protobuf:"varint,6,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`         // HTTP status code
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidateURLResponse) Reset() {
	*x = ValidateURLResponse{}
	mi := &file_url_url_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateURLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateURLResponse) ProtoMessage() {}

func (x *ValidateURLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_url_url_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateURLResponse.ProtoReflect.Descriptor instead.
func (*ValidateURLResponse) Descriptor() ([]byte, []int) {
	return file_url_url_service_proto_rawDescGZIP(), []int{12}
}

func (x *ValidateURLResponse) GetStatus() *common.Response {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ValidateURLResponse) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *ValidateURLResponse) GetIsAccessible() bool {
	if x != nil {
		return x.IsAccessible
	}
	return false
}

func (x *ValidateURLResponse) GetDetectedTitle() string {
	if x != nil {
		return x.DetectedTitle
	}
	return ""
}

func (x *ValidateURLResponse) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *ValidateURLResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

// Check if custom code is available
type CheckAvailabilityRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CustomCode    string                 `protobuf:"bytes,1,opt,name=custom_code,json=customCode,proto3" json:"custom_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckAvailabilityRequest) Reset() {
	*x = CheckAvailabilityRequest{}
	mi := &file_url_url_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckAvailabilityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckAvailabilityRequest) ProtoMessage() {}

func (x *CheckAvailabilityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_url_url_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckAvailabilityRequest.ProtoReflect.Descriptor instead.
func (*CheckAvailabilityRequest) Descriptor() ([]byte, []int) {
	return file_url_url_service_proto_rawDescGZIP(), []int{13}
}

func (x *CheckAvailabilityRequest) GetCustomCode() string {
	if x != nil {
		return x.CustomCode
	}
	return ""
}

type CheckAvailabilityResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *common.Response       `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	IsAvailable   bool                   `protobuf:"varint,2,opt,name=is_available,json=isAvailable,proto3" json:"is_available,omitempty"`
	Suggestions   []string               `protobuf:"bytes,3,rep,name=suggestions,proto3" json:"suggestions,omitempty"` // Alternative suggestions if not available
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckAvailabilityResponse) Reset() {
	*x = CheckAvailabilityResponse{}
	mi := &file_url_url_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckAvailabilityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckAvailabilityResponse) ProtoMessage() {}

func (x *CheckAvailabilityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_url_url_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckAvailabilityResponse.ProtoReflect.Descriptor instead.
func (*CheckAvailabilityResponse) Descriptor() ([]byte, []int) {
	return file_url_url_service_proto_rawDescGZIP(), []int{14}
}

func (x *CheckAvailabilityResponse) GetStatus() *common.Response {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CheckAvailabilityResponse) GetIsAvailable() bool {
	if x != nil {
		return x.IsAvailable
	}
	return false
}

func (x *CheckAvailabilityResponse) GetSuggestions() []string {
	if x != nil {
		return x.Suggestions
	}
	return nil
}

// Bulk operations for premium users
type BulkCreateURLRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Urls          []*CreateURLRequest    `protobuf:"bytes,1,rep,name=urls,proto3" json:"urls,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BulkCreateURLRequest) Reset() {
	*x = BulkCreateURLRequest{}
	mi := &file_url_url_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BulkCreateURLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkCreateURLRequest) ProtoMessage() {}

func (x *BulkCreateURLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_url_url_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkCreateURLRequest.ProtoReflect.Descriptor instead.
func (*BulkCreateURLRequest) Descriptor() ([]byte, []int) {
	return file_url_url_service_proto_rawDescGZIP(), []int{15}
}

func (x *BulkCreateURLRequest) GetUrls() []*CreateURLRequest {
	if x != nil {
		return x.Urls
	}
	return nil
}

func (x *BulkCreateURLRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type BulkCreateURLResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *common.Response       `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Urls          []*URL                 `protobuf:"bytes,2,rep,name=urls,proto3" json:"urls,omitempty"`
	Errors        []*common.Error        `protobuf:"bytes,3,rep,name=errors,proto3" json:"errors,omitempty"` // Per-URL errors
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BulkCreateURLResponse) Reset() {
	*x = BulkCreateURLResponse{}
	mi := &file_url_url_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BulkCreateURLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkCreateURLResponse) ProtoMessage() {}

func (x *BulkCreateURLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_url_url_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkCreateURLResponse.ProtoReflect.Descriptor instead.
func (*BulkCreateURLResponse) Descriptor() ([]byte, []int) {
	return file_url_url_service_proto_rawDescGZIP(), []int{16}
}

func (x *BulkCreateURLResponse) GetStatus() *common.Response {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *BulkCreateURLResponse) GetUrls() []*URL {
	if x != nil {
		return x.Urls
	}
	return nil
}

func (x *BulkCreateURLResponse) GetErrors() []*common.Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

// Analytics integration - increment click count
type IncrementClickRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UrlId         string                 `protobuf:"bytes,1,opt,name=url_id,json=urlId,proto3" json:"url_id,omitempty"`
	UserAgent     string                 `protobuf:"bytes,2,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	IpAddress     string                 `protobuf:"bytes,3,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	Referrer      string                 `protobuf:"bytes,4,opt,name=referrer,proto3" json:"referrer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IncrementClickRequest) Reset() {
	*x = IncrementClickRequest{}
	mi := &file_url_url_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IncrementClickRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncrementClickRequest) ProtoMessage() {}

func (x *IncrementClickRequest) ProtoReflect() protoreflect.Message {
	mi := &file_url_url_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncrementClickRequest.ProtoReflect.Descriptor instead.
func (*IncrementClickRequest) Descriptor() ([]byte, []int) {
	return file_url_url_service_proto_rawDescGZIP(), []int{17}
}

func (x *IncrementClickRequest) GetUrlId() string {
	if x != nil {
		return x.UrlId
	}
	return ""
}

func (x *IncrementClickRequest) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *IncrementClickRequest) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *IncrementClickRequest) GetReferrer() string {
	if x != nil {
		return x.Referrer
	}
	return ""
}

type IncrementClickResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *common.Response       `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	NewCount      int64                  `protobuf:"varint,2,opt,name=new_count,json=newCount,proto3" json:"new_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IncrementClickResponse) Reset() {
	*x = IncrementClickResponse{}
	mi := &file_url_url_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IncrementClickResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncrementClickResponse) ProtoMessage() {}

func (x *IncrementClickResponse) ProtoReflect() protoreflect.Message {
	mi := &file_url_url_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncrementClickResponse.ProtoReflect.Descriptor instead.
func (*IncrementClickResponse) Descriptor() ([]byte, []int) {
	return file_url_url_service_proto_rawDescGZIP(), []int{18}
}

func (x *IncrementClickResponse) GetStatus() *common.Response {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *IncrementClickResponse) GetNewCount() int64 {
	if x != nil {
		return x.NewCount
	}
	return 0
}

var File_url_url_service_proto protoreflect.FileDescriptor

var file_url_url_service_proto_rawDesc = string([]byte{
	0x0a, 0x15, 0x75, 0x72, 0x6c, 0x2f, 0x75, 0x72, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x75, 0x72, 0x6c, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xa3, 0x04, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74,
	0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0d,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0c, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73,
	0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x92, 0x02, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x55, 0x72, 0x6c, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x39, 0x0a,
	0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x59, 0x0a, 0x11,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x75, 0x72, 0x6c, 0x2e, 0x55,
	0x52, 0x4c, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x60, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x55, 0x52,
	0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x75, 0x72, 0x6c, 0x2e, 0x55, 0x52, 0x4c, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22,
	0xd8, 0x02, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x73, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x04, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x73, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x22, 0x59, 0x0a, 0x11, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x75, 0x72, 0x6c, 0x2e, 0x55, 0x52, 0x4c,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x3b, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55,
	0x52, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x3d, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x52, 0x4c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0xb2, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x52, 0x4c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x39,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x96, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x55,
	0x52, 0x4c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x75, 0x72, 0x6c, 0x2e, 0x55, 0x52, 0x4c, 0x52, 0x04, 0x75,
	0x72, 0x6c, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x26, 0x0a, 0x12, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x55, 0x52, 0x4c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xea, 0x01, 0x0a, 0x13, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x3b, 0x0a, 0x18, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x8a, 0x01, 0x0a, 0x19, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x5a,
	0x0a, 0x14, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x52, 0x4c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x75, 0x72, 0x6c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x75, 0x72, 0x6c,
	0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x15, 0x42,
	0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c,
	0x0a, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x75,
	0x72, 0x6c, 0x2e, 0x55, 0x52, 0x4c, 0x52, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x15, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a,
	0x06, 0x75, 0x72, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75,
	0x72, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x22, 0x5f,
	0x0a, 0x16, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x69, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x32,
	0x9d, 0x05, 0x0a, 0x0a, 0x55, 0x52, 0x4c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3a,
	0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x15, 0x2e, 0x75, 0x72,
	0x6c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x75, 0x72, 0x6c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55,
	0x52, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x47, 0x65,
	0x74, 0x55, 0x52, 0x4c, 0x12, 0x12, 0x2e, 0x75, 0x72, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x52,
	0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x75, 0x72, 0x6c, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a,
	0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x15, 0x2e, 0x75, 0x72, 0x6c,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x75, 0x72, 0x6c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x52,
	0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x15, 0x2e, 0x75, 0x72, 0x6c, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x75, 0x72, 0x6c, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x52, 0x4c,
	0x73, 0x12, 0x14, 0x2e, 0x75, 0x72, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x52, 0x4c, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x75, 0x72, 0x6c, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x55, 0x52, 0x4c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40,
	0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x17, 0x2e,
	0x75, 0x72, 0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x55, 0x52, 0x4c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x75, 0x72, 0x6c, 0x2e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x52, 0x0a, 0x11, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x2e, 0x75, 0x72, 0x6c, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x75, 0x72, 0x6c, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x19, 0x2e, 0x75, 0x72, 0x6c, 0x2e, 0x42, 0x75, 0x6c, 0x6b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x75, 0x72, 0x6c, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0e,
	0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x12, 0x1a,
	0x2e, 0x75, 0x72, 0x6c, 0x2e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c,
	0x69, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x75, 0x72, 0x6c,
	0x2e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x75, 0x72,
	0x6c, 0x2d, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2d, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x75, 0x72, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_url_url_service_proto_rawDescOnce sync.Once
	file_url_url_service_proto_rawDescData []byte
)

func file_url_url_service_proto_rawDescGZIP() []byte {
	file_url_url_service_proto_rawDescOnce.Do(func() {
		file_url_url_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_url_url_service_proto_rawDesc), len(file_url_url_service_proto_rawDesc)))
	})
	return file_url_url_service_proto_rawDescData
}

var file_url_url_service_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_url_url_service_proto_goTypes = []any{
	(*URL)(nil),                        // 0: url.URL
	(*CreateURLRequest)(nil),           // 1: url.CreateURLRequest
	(*CreateURLResponse)(nil),          // 2: url.CreateURLResponse
	(*GetURLRequest)(nil),              // 3: url.GetURLRequest
	(*GetURLResponse)(nil),             // 4: url.GetURLResponse
	(*UpdateURLRequest)(nil),           // 5: url.UpdateURLRequest
	(*UpdateURLResponse)(nil),          // 6: url.UpdateURLResponse
	(*DeleteURLRequest)(nil),           // 7: url.DeleteURLRequest
	(*DeleteURLResponse)(nil),          // 8: url.DeleteURLResponse
	(*ListURLsRequest)(nil),            // 9: url.ListURLsRequest
	(*ListURLsResponse)(nil),           // 10: url.ListURLsResponse
	(*ValidateURLRequest)(nil),         // 11: url.ValidateURLRequest
	(*ValidateURLResponse)(nil),        // 12: url.ValidateURLResponse
	(*CheckAvailabilityRequest)(nil),   // 13: url.CheckAvailabilityRequest
	(*CheckAvailabilityResponse)(nil),  // 14: url.CheckAvailabilityResponse
	(*BulkCreateURLRequest)(nil),       // 15: url.BulkCreateURLRequest
	(*BulkCreateURLResponse)(nil),      // 16: url.BulkCreateURLResponse
	(*IncrementClickRequest)(nil),      // 17: url.IncrementClickRequest
	(*IncrementClickResponse)(nil),     // 18: url.IncrementClickResponse
	(*timestamppb.Timestamp)(nil),      // 19: google.protobuf.Timestamp
	(*common.Response)(nil),            // 20: common.Response
	(*common.PaginationRequest)(nil),   // 21: common.PaginationRequest
	(*common.PaginationResponse)(nil),  // 22: common.PaginationResponse
	(*common.Error)(nil),               // 23: common.Error
	(*common.HealthCheckRequest)(nil),  // 24: common.HealthCheckRequest
	(*common.HealthCheckResponse)(nil), // 25: common.HealthCheckResponse
}
var file_url_url_service_proto_depIdxs = []int32{
	19, // 0: url.URL.created_at:type_name -> google.protobuf.Timestamp
	19, // 1: url.URL.expires_at:type_name -> google.protobuf.Timestamp
	19, // 2: url.URL.updated_at:type_name -> google.protobuf.Timestamp
	19, // 3: url.URL.last_accessed:type_name -> google.protobuf.Timestamp
	19, // 4: url.CreateURLRequest.expires_at:type_name -> google.protobuf.Timestamp
	20, // 5: url.CreateURLResponse.status:type_name -> common.Response
	0,  // 6: url.CreateURLResponse.url:type_name -> url.URL
	20, // 7: url.GetURLResponse.status:type_name -> common.Response
	0,  // 8: url.GetURLResponse.url:type_name -> url.URL
	19, // 9: url.UpdateURLRequest.expires_at:type_name -> google.protobuf.Timestamp
	20, // 10: url.UpdateURLResponse.status:type_name -> common.Response
	0,  // 11: url.UpdateURLResponse.url:type_name -> url.URL
	20, // 12: url.DeleteURLResponse.status:type_name -> common.Response
	21, // 13: url.ListURLsRequest.pagination:type_name -> common.PaginationRequest
	20, // 14: url.ListURLsResponse.status:type_name -> common.Response
	0,  // 15: url.ListURLsResponse.urls:type_name -> url.URL
	22, // 16: url.ListURLsResponse.pagination:type_name -> common.PaginationResponse
	20, // 17: url.ValidateURLResponse.status:type_name -> common.Response
	20, // 18: url.CheckAvailabilityResponse.status:type_name -> common.Response
	1,  // 19: url.BulkCreateURLRequest.urls:type_name -> url.CreateURLRequest
	20, // 20: url.BulkCreateURLResponse.status:type_name -> common.Response
	0,  // 21: url.BulkCreateURLResponse.urls:type_name -> url.URL
	23, // 22: url.BulkCreateURLResponse.errors:type_name -> common.Error
	20, // 23: url.IncrementClickResponse.status:type_name -> common.Response
	1,  // 24: url.URLService.CreateURL:input_type -> url.CreateURLRequest
	3,  // 25: url.URLService.GetURL:input_type -> url.GetURLRequest
	5,  // 26: url.URLService.UpdateURL:input_type -> url.UpdateURLRequest
	7,  // 27: url.URLService.DeleteURL:input_type -> url.DeleteURLRequest
	9,  // 28: url.URLService.ListURLs:input_type -> url.ListURLsRequest
	11, // 29: url.URLService.ValidateURL:input_type -> url.ValidateURLRequest
	13, // 30: url.URLService.CheckAvailability:input_type -> url.CheckAvailabilityRequest
	15, // 31: url.URLService.BulkCreateURL:input_type -> url.BulkCreateURLRequest
	17, // 32: url.URLService.IncrementClick:input_type -> url.IncrementClickRequest
	24, // 33: url.URLService.HealthCheck:input_type -> common.HealthCheckRequest
	2,  // 34: url.URLService.CreateURL:output_type -> url.CreateURLResponse
	4,  // 35: url.URLService.GetURL:output_type -> url.GetURLResponse
	6,  // 36: url.URLService.UpdateURL:output_type -> url.UpdateURLResponse
	8,  // 37: url.URLService.DeleteURL:output_type -> url.DeleteURLResponse
	10, // 38: url.URLService.ListURLs:output_type -> url.ListURLsResponse
	12, // 39: url.URLService.ValidateURL:output_type -> url.ValidateURLResponse
	14, // 40: url.URLService.CheckAvailability:output_type -> url.CheckAvailabilityResponse
	16, // 41: url.URLService.BulkCreateURL:output_type -> url.BulkCreateURLResponse
	18, // 42: url.URLService.IncrementClick:output_type -> url.IncrementClickResponse
	25, // 43: url.URLService.HealthCheck:output_type -> common.HealthCheckResponse
	34, // [34:44] is the sub-list for method output_type
	24, // [24:34] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_url_url_service_proto_init() }
func file_url_url_service_proto_init() {
	if File_url_url_service_proto != nil {
		return
	}
	file_url_url_service_proto_msgTypes[5].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_url_url_service_proto_rawDesc), len(file_url_url_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_url_url_service_proto_goTypes,
		DependencyIndexes: file_url_url_service_proto_depIdxs,
		MessageInfos:      file_url_url_service_proto_msgTypes,
	}.Build()
	File_url_url_service_proto = out.File
	file_url_url_service_proto_goTypes = nil
	file_url_url_service_proto_depIdxs = nil
}
