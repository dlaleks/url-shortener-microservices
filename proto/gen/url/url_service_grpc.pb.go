// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: url/url_service.proto

package url

import (
	context "context"
	common "github.com/url-shortener-microservices/proto/gen/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	URLService_CreateURL_FullMethodName         = "/url.URLService/CreateURL"
	URLService_GetURL_FullMethodName            = "/url.URLService/GetURL"
	URLService_UpdateURL_FullMethodName         = "/url.URLService/UpdateURL"
	URLService_DeleteURL_FullMethodName         = "/url.URLService/DeleteURL"
	URLService_ListURLs_FullMethodName          = "/url.URLService/ListURLs"
	URLService_ValidateURL_FullMethodName       = "/url.URLService/ValidateURL"
	URLService_CheckAvailability_FullMethodName = "/url.URLService/CheckAvailability"
	URLService_BulkCreateURL_FullMethodName     = "/url.URLService/BulkCreateURL"
	URLService_IncrementClick_FullMethodName    = "/url.URLService/IncrementClick"
	URLService_HealthCheck_FullMethodName       = "/url.URLService/HealthCheck"
)

// URLServiceClient is the client API for URLService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// gRPC service definition
type URLServiceClient interface {
	// Core CRUD operations
	CreateURL(ctx context.Context, in *CreateURLRequest, opts ...grpc.CallOption) (*CreateURLResponse, error)
	GetURL(ctx context.Context, in *GetURLRequest, opts ...grpc.CallOption) (*GetURLResponse, error)
	UpdateURL(ctx context.Context, in *UpdateURLRequest, opts ...grpc.CallOption) (*UpdateURLResponse, error)
	DeleteURL(ctx context.Context, in *DeleteURLRequest, opts ...grpc.CallOption) (*DeleteURLResponse, error)
	// Listing and search
	ListURLs(ctx context.Context, in *ListURLsRequest, opts ...grpc.CallOption) (*ListURLsResponse, error)
	// Utility operations
	ValidateURL(ctx context.Context, in *ValidateURLRequest, opts ...grpc.CallOption) (*ValidateURLResponse, error)
	CheckAvailability(ctx context.Context, in *CheckAvailabilityRequest, opts ...grpc.CallOption) (*CheckAvailabilityResponse, error)
	// Bulk operations
	BulkCreateURL(ctx context.Context, in *BulkCreateURLRequest, opts ...grpc.CallOption) (*BulkCreateURLResponse, error)
	// Analytics integration
	IncrementClick(ctx context.Context, in *IncrementClickRequest, opts ...grpc.CallOption) (*IncrementClickResponse, error)
	// Health check
	HealthCheck(ctx context.Context, in *common.HealthCheckRequest, opts ...grpc.CallOption) (*common.HealthCheckResponse, error)
}

type uRLServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewURLServiceClient(cc grpc.ClientConnInterface) URLServiceClient {
	return &uRLServiceClient{cc}
}

func (c *uRLServiceClient) CreateURL(ctx context.Context, in *CreateURLRequest, opts ...grpc.CallOption) (*CreateURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateURLResponse)
	err := c.cc.Invoke(ctx, URLService_CreateURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLServiceClient) GetURL(ctx context.Context, in *GetURLRequest, opts ...grpc.CallOption) (*GetURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetURLResponse)
	err := c.cc.Invoke(ctx, URLService_GetURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLServiceClient) UpdateURL(ctx context.Context, in *UpdateURLRequest, opts ...grpc.CallOption) (*UpdateURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateURLResponse)
	err := c.cc.Invoke(ctx, URLService_UpdateURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLServiceClient) DeleteURL(ctx context.Context, in *DeleteURLRequest, opts ...grpc.CallOption) (*DeleteURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteURLResponse)
	err := c.cc.Invoke(ctx, URLService_DeleteURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLServiceClient) ListURLs(ctx context.Context, in *ListURLsRequest, opts ...grpc.CallOption) (*ListURLsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListURLsResponse)
	err := c.cc.Invoke(ctx, URLService_ListURLs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLServiceClient) ValidateURL(ctx context.Context, in *ValidateURLRequest, opts ...grpc.CallOption) (*ValidateURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateURLResponse)
	err := c.cc.Invoke(ctx, URLService_ValidateURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLServiceClient) CheckAvailability(ctx context.Context, in *CheckAvailabilityRequest, opts ...grpc.CallOption) (*CheckAvailabilityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckAvailabilityResponse)
	err := c.cc.Invoke(ctx, URLService_CheckAvailability_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLServiceClient) BulkCreateURL(ctx context.Context, in *BulkCreateURLRequest, opts ...grpc.CallOption) (*BulkCreateURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BulkCreateURLResponse)
	err := c.cc.Invoke(ctx, URLService_BulkCreateURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLServiceClient) IncrementClick(ctx context.Context, in *IncrementClickRequest, opts ...grpc.CallOption) (*IncrementClickResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IncrementClickResponse)
	err := c.cc.Invoke(ctx, URLService_IncrementClick_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLServiceClient) HealthCheck(ctx context.Context, in *common.HealthCheckRequest, opts ...grpc.CallOption) (*common.HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.HealthCheckResponse)
	err := c.cc.Invoke(ctx, URLService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// URLServiceServer is the server API for URLService service.
// All implementations must embed UnimplementedURLServiceServer
// for forward compatibility.
//
// gRPC service definition
type URLServiceServer interface {
	// Core CRUD operations
	CreateURL(context.Context, *CreateURLRequest) (*CreateURLResponse, error)
	GetURL(context.Context, *GetURLRequest) (*GetURLResponse, error)
	UpdateURL(context.Context, *UpdateURLRequest) (*UpdateURLResponse, error)
	DeleteURL(context.Context, *DeleteURLRequest) (*DeleteURLResponse, error)
	// Listing and search
	ListURLs(context.Context, *ListURLsRequest) (*ListURLsResponse, error)
	// Utility operations
	ValidateURL(context.Context, *ValidateURLRequest) (*ValidateURLResponse, error)
	CheckAvailability(context.Context, *CheckAvailabilityRequest) (*CheckAvailabilityResponse, error)
	// Bulk operations
	BulkCreateURL(context.Context, *BulkCreateURLRequest) (*BulkCreateURLResponse, error)
	// Analytics integration
	IncrementClick(context.Context, *IncrementClickRequest) (*IncrementClickResponse, error)
	// Health check
	HealthCheck(context.Context, *common.HealthCheckRequest) (*common.HealthCheckResponse, error)
	mustEmbedUnimplementedURLServiceServer()
}

// UnimplementedURLServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedURLServiceServer struct{}

func (UnimplementedURLServiceServer) CreateURL(context.Context, *CreateURLRequest) (*CreateURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateURL not implemented")
}
func (UnimplementedURLServiceServer) GetURL(context.Context, *GetURLRequest) (*GetURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetURL not implemented")
}
func (UnimplementedURLServiceServer) UpdateURL(context.Context, *UpdateURLRequest) (*UpdateURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateURL not implemented")
}
func (UnimplementedURLServiceServer) DeleteURL(context.Context, *DeleteURLRequest) (*DeleteURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteURL not implemented")
}
func (UnimplementedURLServiceServer) ListURLs(context.Context, *ListURLsRequest) (*ListURLsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListURLs not implemented")
}
func (UnimplementedURLServiceServer) ValidateURL(context.Context, *ValidateURLRequest) (*ValidateURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateURL not implemented")
}
func (UnimplementedURLServiceServer) CheckAvailability(context.Context, *CheckAvailabilityRequest) (*CheckAvailabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAvailability not implemented")
}
func (UnimplementedURLServiceServer) BulkCreateURL(context.Context, *BulkCreateURLRequest) (*BulkCreateURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkCreateURL not implemented")
}
func (UnimplementedURLServiceServer) IncrementClick(context.Context, *IncrementClickRequest) (*IncrementClickResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrementClick not implemented")
}
func (UnimplementedURLServiceServer) HealthCheck(context.Context, *common.HealthCheckRequest) (*common.HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedURLServiceServer) mustEmbedUnimplementedURLServiceServer() {}
func (UnimplementedURLServiceServer) testEmbeddedByValue()                    {}

// UnsafeURLServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to URLServiceServer will
// result in compilation errors.
type UnsafeURLServiceServer interface {
	mustEmbedUnimplementedURLServiceServer()
}

func RegisterURLServiceServer(s grpc.ServiceRegistrar, srv URLServiceServer) {
	// If the following call pancis, it indicates UnimplementedURLServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&URLService_ServiceDesc, srv)
}

func _URLService_CreateURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLServiceServer).CreateURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLService_CreateURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLServiceServer).CreateURL(ctx, req.(*CreateURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLService_GetURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLServiceServer).GetURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLService_GetURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLServiceServer).GetURL(ctx, req.(*GetURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLService_UpdateURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLServiceServer).UpdateURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLService_UpdateURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLServiceServer).UpdateURL(ctx, req.(*UpdateURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLService_DeleteURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLServiceServer).DeleteURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLService_DeleteURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLServiceServer).DeleteURL(ctx, req.(*DeleteURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLService_ListURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListURLsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLServiceServer).ListURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLService_ListURLs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLServiceServer).ListURLs(ctx, req.(*ListURLsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLService_ValidateURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLServiceServer).ValidateURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLService_ValidateURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLServiceServer).ValidateURL(ctx, req.(*ValidateURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLService_CheckAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAvailabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLServiceServer).CheckAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLService_CheckAvailability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLServiceServer).CheckAvailability(ctx, req.(*CheckAvailabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLService_BulkCreateURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkCreateURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLServiceServer).BulkCreateURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLService_BulkCreateURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLServiceServer).BulkCreateURL(ctx, req.(*BulkCreateURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLService_IncrementClick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrementClickRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLServiceServer).IncrementClick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLService_IncrementClick_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLServiceServer).IncrementClick(ctx, req.(*IncrementClickRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLServiceServer).HealthCheck(ctx, req.(*common.HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// URLService_ServiceDesc is the grpc.ServiceDesc for URLService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var URLService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "url.URLService",
	HandlerType: (*URLServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateURL",
			Handler:    _URLService_CreateURL_Handler,
		},
		{
			MethodName: "GetURL",
			Handler:    _URLService_GetURL_Handler,
		},
		{
			MethodName: "UpdateURL",
			Handler:    _URLService_UpdateURL_Handler,
		},
		{
			MethodName: "DeleteURL",
			Handler:    _URLService_DeleteURL_Handler,
		},
		{
			MethodName: "ListURLs",
			Handler:    _URLService_ListURLs_Handler,
		},
		{
			MethodName: "ValidateURL",
			Handler:    _URLService_ValidateURL_Handler,
		},
		{
			MethodName: "CheckAvailability",
			Handler:    _URLService_CheckAvailability_Handler,
		},
		{
			MethodName: "BulkCreateURL",
			Handler:    _URLService_BulkCreateURL_Handler,
		},
		{
			MethodName: "IncrementClick",
			Handler:    _URLService_IncrementClick_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _URLService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "url/url_service.proto",
}
